{"version":3,"sources":["serviceWorker.js","features/notes/components/Button.jsx","features/notes/components/Input.jsx","features/notes/data/mock-data.js","features/notes/noteSlice.js","features/notes/views/Header.jsx","features/notes/components/Item.jsx","features/notes/components/ItemList.jsx","features/notes/views/Main.jsx","App.js","app/store.js","index.js"],"names":["Boolean","window","location","hostname","match","Button","className","text","onClick","Input","placeholder","value","onChange","fakeData","checked","date","id","initialState","notes","JSON","parse","localStorage","getItem","input","filter","sendToLocalStorage","item","setItem","stringify","noteSlice","createSlice","name","reducers","createNote","state","Date","push","toLocaleString","now","alert","handleChangeInput","action","payload","sortByName","sort","a","b","sortByDate","handleChangeFilter","checkNote","map","note","deleteNote","actions","Header","useSelector","noteState","dispatch","useDispatch","e","target","autoFocus","Item","onDoneClick","onDeleteClick","ItemList","filteredNotes","Main","toLowerCase","includes","App","store","configureStore","reducer","notesReducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25ad47e2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","export default function Button({ className, text, onClick }) {\r\n  return (\r\n    <button className={className} onClick={onClick}>\r\n      {text}\r\n    </button>\r\n  );\r\n}\r\n","export default function Input({ className, placeholder, value, onChange }) {\r\n  return (\r\n    <input\r\n      className={className}\r\n      placeholder={placeholder}\r\n      onChange={onChange}\r\n      value={value}\r\n    />\r\n  );\r\n}\r\n","const fakeData = [\r\n  {\r\n    text: \"Make cookies\",\r\n    checked: true,\r\n    date: \"09.09.2021  09:56:24\",\r\n    id: 1631170584437,\r\n  },\r\n  {\r\n    text: \"Posmotret vo vcherashniy den\",\r\n    checked: false,\r\n    date: \"09.09.2021  09:56:33\",\r\n    id: 1631170593196,\r\n  },\r\n  {\r\n    text: \"To eat\",\r\n    checked: false,\r\n    date: \"09.09.2021  10:03:35\",\r\n    id: 1631171015482,\r\n  },\r\n];\r\n\r\nexport default function getFakeData() {\r\n  return fakeData;\r\n}\r\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nimport getFakeData from \"./data/mock-data\";\n\nconst initialState = {\n  notes: JSON.parse(localStorage.getItem(\"notes\")) || getFakeData(),\n  input: \"\",\n  filter: \"\",\n};\n\nconst sendToLocalStorage = (item) => {\n  localStorage.setItem(\"notes\", JSON.stringify(item));\n};\n\nexport const noteSlice = createSlice({\n  name: \"notes\",\n  initialState,\n  reducers: {\n    //Creating new note\n    createNote: (state) => {\n      if (!state.input) {\n        alert(\"Write something...\");\n        return;\n      }\n      const date = new Date();\n      state.notes.push({\n        text: state.input,\n        checked: false,\n        date: `${date.toLocaleString()}`,\n        id: Date.now(date),\n      });\n      sendToLocalStorage(state.notes);\n      state.input = \"\";\n    },\n    handleChangeInput: (state, action) => {\n      state.input = action.payload;\n    },\n\n    //Sorting notes\n    sortByName: (state) => {\n      state.notes.sort((a, b) => {\n        if (a.text > b.text) return 1;\n        else return -1;\n      });\n    },\n\n    sortByDate: (state) => {\n      state.notes.sort((a, b) => {\n        if (a.id < b.id) return 1;\n        else return -1;\n      });\n    },\n\n    handleChangeFilter: (state, action) => {\n      state.filter = action.payload;\n    },\n\n    //Operations with notes\n    checkNote: (state, action) => {\n      state.notes = state.notes.map((note) => {\n        if (note.id === action.payload) {\n          note.checked = !note.checked;\n        }\n        return note;\n      });\n      sendToLocalStorage(state.notes);\n    },\n\n    deleteNote: (state, action) => {\n      state.notes = state.notes.filter((note) => note.id !== action.payload);\n      sendToLocalStorage(state.notes);\n    },\n  },\n});\n\nexport const {\n  sortByName,\n  sortByDate,\n  createNote,\n  handleChangeInput,\n  handleChangeFilter,\n  checkNote,\n  deleteNote,\n} = noteSlice.actions;\n\nexport default noteSlice.reducer;\n","import { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport Button from \"../components/Button\";\r\nimport Input from \"../components/Input\";\r\n\r\nimport {\r\n  sortByName,\r\n  sortByDate,\r\n  createNote,\r\n  handleChangeInput,\r\n  handleChangeFilter,\r\n} from \"../noteSlice\";\r\n\r\nexport default function Header() {\r\n  const { filter, input } = useSelector((state) => state.noteState);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"todo-sorting\">\r\n        <Button\r\n          className=\"sort-name\"\r\n          onClick={() => dispatch(sortByName())}\r\n          text=\"Sort by Name\"\r\n        />\r\n        <Button\r\n          className=\"sort-date\"\r\n          onClick={() => dispatch(sortByDate())}\r\n          text=\"Sort by Date\"\r\n        />\r\n        <Input\r\n          value={filter}\r\n          className=\"filter\"\r\n          placeholder=\"Filter...\"\r\n          onChange={(e) => dispatch(handleChangeFilter(e.target.value))}\r\n        />\r\n      </div>\r\n      <div className=\"todo-input\">\r\n        <h1>ToDo List</h1>\r\n        <Input\r\n          value={input}\r\n          className=\"message\"\r\n          placeholder=\"What do you want to do?\"\r\n          onChange={(e) => dispatch(handleChangeInput(e.target.value))}\r\n          autoFocus\r\n        />\r\n        <Button\r\n          onClick={() => dispatch(createNote())}\r\n          className=\"add\"\r\n          text=\"ADD\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import Button from \"./Button\";\r\n\r\nexport default function Item({ onDoneClick, onDeleteClick, item }) {\r\n  return (\r\n    <div\r\n      className={`item ${item.checked ? \"checked\" : \"unchecked\"}`}\r\n      id={item.id}\r\n    >\r\n      <div className=\"todo-text\">{item.text}</div>\r\n      <div className=\"right-column\">\r\n        <div className=\"date\">{item.date}</div>\r\n        <Button\r\n          text=\"✓\"\r\n          className=\"todo-check\"\r\n          onClick={() => onDoneClick(item.id)}\r\n        />\r\n        <Button\r\n          text=\"✖\"\r\n          className=\"todo-delete\"\r\n          onClick={() => onDeleteClick(item.id)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import Item from \"./Item\";\r\n\r\nexport default function ItemList({\r\n  onDeleteClick,\r\n  onDoneClick,\r\n  filteredNotes,\r\n}) {\r\n  return (\r\n    <div className=\"todo-list\">\r\n      {filteredNotes.map((item) => {\r\n        return (\r\n          <Item\r\n            key={item.id}\r\n            item={item}\r\n            onDoneClick={onDoneClick}\r\n            onDeleteClick={onDeleteClick}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { checkNote, deleteNote } from \"../noteSlice\";\r\nimport ItemList from \"../components/ItemList\";\r\n\r\nexport default function Main() {\r\n  const dispatch = useDispatch();\r\n  const { notes, filter } = useSelector((state) => state.noteState),\r\n    filteredNotes = notes.filter((note) => {\r\n      if (note.text.toLowerCase().includes(filter.toLowerCase())) return note;\r\n      else return null;\r\n    });\r\n\r\n  return (\r\n    <ItemList\r\n      filteredNotes={filteredNotes}\r\n      onDeleteClick={(id) => dispatch(deleteNote(id))}\r\n      onDoneClick={(id) => dispatch(checkNote(id))}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\n\nimport Header from \"./features/notes/views/Header\";\nimport Main from \"./features/notes/views/Main\";\nimport \"./index.css\";\n\nexport const App = () => {\n  return (\n    <>\n      <Header />\n      <Main />\n    </>\n  );\n};\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport notesReducer from \"../features/notes/noteSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    noteState: notesReducer,\n  },\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\n\nimport { App } from \"./App\";\nimport { store } from \"./app/store\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}